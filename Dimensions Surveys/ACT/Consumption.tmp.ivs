Metadata(en-US, Question, Label)
FixedTextsList "" define
    {
        NoWhat "No details given",
        NoPicture "No picture taken",
        Picture "Photo of",
        StartPrevious "I had another"
    };

	Monthlist "" define
	{
	M01 "Jan"
	M02 "Feb"
	M03 "Mar"
	M04 "Apr"
	M05 "May"
	M06 "Jun"
	M07 "Jul"
	M08 "Aug"
	M09 "Sep"
	M10 "Oct"
	M11 "Nov"
	M12 "Dec"
	};
	
	sizes "" define
	{
	size44 "44ml" factor(44),
	size90 "90ml" factor(90),
	size100 "100ml" factor(100),
	size125 "125ml" factor(125),
	size150 "150ml" factor(150),
	size180 "180ml" factor(180),
	size200 "200ml" factor(200),
	size220 "220ml" factor(220),
	size240 "240ml" factor(240),
	size250 "250ml" factor(250),
	size260 "260ml" factor(260),
	size270 "267ml" factor(270),
	size300 "300ml" factor(300),
	size310 "310ml" factor(310),
	size320 "320ml" factor(320),
	size330 "330ml" factor(330),
	size355 "355ml" factor(355),
	size375 "375ml" factor(375),
	size400 "400ml" factor(400),
	size415 "415ml" factor(415),
	size440 "440ml" factor(440),
	size458 "458ml" factor(458),
	size473 "473ml" factor(473),
	size500 "500ml" factor(500),
	size550 "550ml" factor(550),
	size560 "560ml" factor(560),
	size568 "568ml" factor(568),
	size650 "650ml" factor(650),
	size750 "750ml" factor(750),
	size900 "900ml" factor(900),
	size1000 "1 litre" factor(1000),
	size1140 "1,140ml" factor(1410),
	size1500 "1.5 litres" factor(1500),
	size1700 "1.7 litres" factor(1700),
	size1750 "1,750ml" factor(1750),
	size3000 "3 litres" factor(3000),
	size4000 "4 litres" factor(4000),
	size4500 "4.5 litres" factor(4500),
	size6000 "6 litres" factor(6000)
	};
	
	
	ContainerSizesList "" define
	{
	beer "size330,size355,size500,size750",
	beer_can "size355,size440,size473,size500,size568",
	beer_glass "size250,size500,size750,size1000",
	cider "size250,size270,size330,size400,size500,size1000,size1700",
	cider_can "size355,size440,size458,size473,size500,size568",
	beer_mug "size473,size568,size415,size560",
	Whisky "size125,size200,size375,size750,size1140,size1750",
	Vodka "size125,size200,size375,size750,size1140,size1750",
	Tequila "size125,size200,size375,size750,size1140,size1750",
	Gin "size125,size200,size375,size750,size1140,size1750",
	Rum "size125,size200,size375,size750,size1140,size1750",
	Spirits "size125,size200,size375,size750,size1140,size1750",
	Cognac "size125,size200,size375,size750,size1140,size175",
	Cognac_glass "size200,size320,size473,size550",
	White_wine_glass "size240,size355",
	Dessert_wine_glass "size250, size400",
	Highball_glass "size310",
	Juice_glass "size100,size250,size300,size400",
	Martini_glass "size150,size240,size300",
	red_wine_glass "size650,size900",
	rum_glass "220ml",
	short_glass "size44",
	snifter "size180,size240",
	Table_wine_glass "size150,size200",
	Tequila_glass "size44",
	Vodka_glass "size44,size90",
	Whiskey_glass "size200,size250",
	Wine "size200,size375,size750,size1500,size300,size4000,size4500,size6000",
	Wine_box "size1500,size3000",
	Champagne_glass "size220,size260"
	};

	ContainerTransformList "" define
	{
	beer "Beer bottle",
	beer_can "Beer can",
	beer_glass "Beer Glass",
	cider "Cider bottle",
	cider_can "cider can",
	beer_mug "Beer mug",
	Whisky "Whisky bottle",
	Vodka "Vodka Bottle",
	Tequila "Tequilla bottle",
	Gin "Gin bottle",
	Rum "Rum bottle",
	Spirits "Spirits bottle",
	Cognac "Cognac bottle",
	Cognac_glass "Cognac glass",
	White_wine_glass "White wine glass",
	Dessert_wine_glass "Dessert wine glass",
	Highball_glass "Highball glass",
	Juice_glass "Juice glass",
	Martini_glass "Martini glass",
	red_wine_glass "Red wine glass",
	rum_glass "Rum glass",
	short_glass "Short glass",
	snifter "Snifter",
	Table_wine_glass "Table wine glass",
	Tequila_glass "Tequila glass",
	Vodka_glass "Vodka glass",
	Whiskey_glass "Whiskey glass",
	Wine "Wine bottle",
	Wine_box "Wine box",
	Champagne_glass "Champagne glass"
	};
	
    FixedTexts ""
    categorical [1..1]
    {
        use FixedTextsList -
    } nocasedata;

    Summary ""
        style(
            ZIndex = -45
        )
    categorical [..1]
    {
        when "{#contentWHEN}",
        where "{#contentWHERE}",
        what "{#contentWHAT}",
        howmuch "{#contentHOWMUCH}",
        picture "{#contentPICTURE}",
        done "{#contentDONE}"
    } nocasedata;

	Confirm "Please confirm that this event can be recorded" 
	style(zIndex=-40)
	categorical[1]
	{
	Yes "Record this entry",
	No "Go back so I can make changes"
	};
	
    ScriptSource "PostMessage Script source"
    text [..100]
    nocasedata codes(
    {
        nosource "" NA
    } );

	PreviousEntry "" text[..100] nocasedata;
	
    ProgressJSON "{#Progress.json}"
        style(
            ZIndex = -10
        )
    info;

    Progress "" block fields
    (
        Status "Progress Status"
            style(
                ZIndex = -20,
                Width = "50%"
            )
        text [..20]
        nocasedata;

        When "Progress When"
            style(
                ZIndex = -20,
                Width = "50%"
            )
        text [..26]
        nocasedata;

        What "Progress What"
            style(
                ZIndex = -20,
                Width = "50%"
            )
        text [..300]
        nocasedata;

        json ""
            style(
                ZIndex = -20,
                Width = "90%"
            )
        text [..400]
        nocasedata;

    );
    
    GetMonthList "" categorical[1]
    {
    use monthlist
    } nocasedata;
	
    '-------------------
    '  Survey Questions
    '===================
    When "Indicate the time when you finished consumption"
        style(
            ZIndex = -20,
            Width = "75%"
        )
    date;

    When_MinDate "Earliest possible date/time"
    text [..26]
    nocasedata;

    When_MaxDate "Lastest possible date/time"
    text [..26]
    nocasedata;

    When_Entry "When did you start your journey"
        style(
            ZIndex = -91
        )
    text [..25]
    nocasedata;

    Where "Where you were"
        style(
            ZIndex = -40
        )
    categorical [1..1]
    {
        Home "My Home",
        otherhome "Someone Else's Home",
        Bar "Bar/Lounge/Club incl. Sports Bar",
        Restaurant "Restaurant",
        unLicensed "Cottage/Chalet/Vacation Home/Camp",
        Licensed "Hotel/Motel/Banquet Hall",
        OtherPlace "Other location"
    };

    Category "Select the type of container from which you consumed your drink"
        style(
            ZIndex = -40
        )
    categorical [1..1]
    {
        Beer "Beer",
        Wine "Wine",
        Spirits "Spirits (cocktail or straight",
        Cider "Cider",
        Coolers "Flavored alcoholic beverages",
        premixed "Pre-mixed or ready-to-drink cocktails",
        hard "Hard Seltzer or Hard Soda",
        othertype "Other alcoholic beverages"
    };

    What "Describe the product consumed or scan the product’s barcode"
        style(
            ZIndex = -25,
            Width = "75%",
            Control(
                Type = "SingleLineEdit"
            )
        )
    text [..500]
    codes(
    {
    	Previous "{#PreviousEntry}" exclusive,
        NoManual "" NA
    } );

    Barcode "Scan the barcode of the product you consumed"
        style(
            ZIndex = -20,
            Width = "75%"
        )
    text [..25]
    codes(
    {
        NoScan "" NA
    } );

    WhatInfo "Info for how to capture what"
    info;

    WhatTabStrip ""
    categorical [1..1]
    {
        barcode "barcode",
        what "what",
        whatinfo "whatinfo"
    } nocasedata;

    Container ""
        style(
            ZIndex = -20,
            Width = "75%"
        )
    text [..500]
    codes(
    {
        NoContainer "" NA
    } );

    Picture "Take a photo of the brand of product you consumed"
        style(
            ZIndex = -20,
            Width = "75%"
        )
    text [..500]
    codes(
    {
        RefusedPicture "I don't want to provide a picture" exclusive,
        UnablePicture "I cannot provide a picture" exclusive,
        NoPicture "" NA
    } );

    QTY ""
        style(
            ZIndex = -20,
            Width = "5em"
        )
    long [0 .. 100];

    WhichWhat ""
        style(
            ZIndex = -40
        )
    categorical [1..1]
    {
        barcode "Scan",
        what "Enter"
    };

    PickContainer "Describe the container you used to hold the drink you consumed"
        style(
            ZIndex = -25,
            Control(
                Type = "SingleLineEdit"
            )
        )
    text [..200];

	PickContainerLookup "" categorical[1]
	{
	use ContainerTransformList
	} nocasedata;

	PickContainerSizes "" categorical[1]
	{
	use ContainerSizesList
	} nocasedata;
	
	WhichContainerText "" 
	text[..100];
	
	WhichSize "Select the size of your container." 
	style(zIndex=-40)
	categorical[1]
	{
	use sizes
	};
	
	AmountConsumed "Indicate how much of the container's drink was consumed." 
	style(zIndex=-56)
	long[1..5];
	
	HowMuch "" long[..6000];
	
	SizeandAmountPage "" Page (WhichSize, AmountConsumed);
	
    HowMuchPage ""
    page(
        Category,
        QTY
    );
    SummaryPage ""
    page(
        Summary,
        ProgressJSON
    );
    WhatPage ""
    page(
        WhichWhat,
        What,
        Barcode
    );
End Metadata
Routing(Web)

'Change progress question to a banner
'Add Banner to final-summary
'Ensure completed and finished have the banner
'make sure the banner shows the right answer
'react to i.user1 (staging, development, production)

dim templateLocation
dim visibilityRule
dim stayinLoop
dim postMessageScript
dim htmlWHEN[13], htmlWHERE[13], htmlWHAT[13], htmlHOWMUCH[13], htmlPICTURE[13], htmlDONE[13]
dim contentWHEN, contentWHERE, contentWHAT, contentHOWMUCH, contentPICTURE, ContentDone
dim sampleMinDate, sampleMaxDate, samplePrevious
dim statusBanner
dim lastQuestion
dim calcDate
dim progressBar
dim isItInComplete

IOM.OffPathDataMode = offpathdatamodes.dmClearOnComplete
IOM.Info.EstimatedPages = 5
progressBar = 0
isItInComplete = false

debug.Log("-------- BEFORE -----------")
debug.Log(MakeString("WHEN: ", When.Response, " - ", When.Info.IsOnPath, " -- ", When.info.Offpathresponse))
debug.Log(MakeString("WHEN ENTRY: ", When_Entry.Response, " - ", When_Entry.Info.IsOnPath, " -- ", When_Entry.Info.Offpathresponse))
debug.Log(MakeString("WHAT: ", WHAT.Response, " - ", WHAT.Info.IsOnPath, " -- ", WHAT.Info.Offpathresponse))
debug.Log(MakeString("WHERE: ", WHERE.Response, " - ", WHERE.Info.IsOnPath, " -- ", WHERE.Info.Offpathresponse))
debug.Log(MakeString("HOWMUCH: ", HOWMUCH.Response, " - ", HOWMUCH.Info.IsOnPath, " -- ", HOWMUCH.Info.Offpathresponse))
debug.Log("-------- BEFORE -----------")


'if not Progress.Info.IsOnPath then Progress.Status.Response = Progress.Status.Info.OffPathResponse
'if not Progress.Info.IsOnPath then Progress.When.Response = Progress.When.Info.OffPathResponse
'if not Progress.Info.IsOnPath then Progress.What.Response = Progress.What.Info.OffPathResponse


if not When.Info.IsOnPath then 
	When.Response = When.Info.OffPathResponse
	if when.response = null or when.Response = "" then  
		When.Response = unformatUTC(IOM.SampleRecord["MaxDate"])
	end if
end if

if not What.Info.IsOnPath then What.Response = What.Info.OffPathResponse
if not Where.Info.IsOnPath then Where.Response = Where.Info.OffPathResponse
if not Category.Info.IsOnPath then Category.Response = Category.Info.OffPathResponse

if not Howmuch.Info.IsOnPath then Howmuch.Response = howmuch.Info.OffPathResponse
if not WhichContainerText.Info.IsOnPath then WhichContainerText.Response = WhichContainerText.Info.OffPathResponse
if not WhichSize.Info.IsOnPath then WhichSize.Response = WhichSize.Info.OffPathResponse
if not AmountConsumed.Info.IsOnPath then AmountConsumed.Response = AmountConsumed.Info.OffPathResponse
if not Container.Info.IsOnPath then Container.Response = Container.Info.OffPathResponse



htmlWHEN[0] = "<div class='l-summary-detail'><!-- content under the lastchange layer -->"
htmlWHEN[1] = "<div class='l-summary-questionname'>"
htmlWHEN[2] = "WHEN"
htmlWHEN[3] = "</div>"
htmlWHEN[4] = "<div class='l-summary-questionprompt'>"
htmlWHEN[5] = "Date and time of consumption" 
htmlWHEN[6] = "</div>"
htmlWHEN[7] = "<div class='l-summary-response'>"
htmlWHEN[8] = ""
htmlWHEN[9] = "</div>"
htmlWHEN[10] = "<div class='l-summary-lastchange'><!-- visible if last changed record --></div>"
htmlWHEN[11] = "<div class='l-summary-background'><!-- content under the lastchange layer --></div>"
htmlWHEN[12] = "</div>"

htmlWHERE[0] = "<div class='l-summary-detail'><!-- content under the lastchange layer -->"
htmlWHERE[1] = "<div class='l-summary-questionname'>"
htmlWHERE[2] = "LOCATION"
htmlWHERE[3] = "</div>"
htmlWHERE[4] = "<div class='l-summary-questionprompt'>"
htmlWHERE[5] = "Where you were" 
htmlWHERE[6] = "</div>"
htmlWHERE[7] = "<div class='l-summary-response'>"
htmlWHERE[8] = ""
htmlWHERE[9] = "</div>"
htmlWHERE[10] = "<div class='l-summary-lastchange'><!-- visible if last changed record --></div>"
htmlWHERE[11] = "<div class='l-summary-background'><!-- content under the lastchange layer --></div>"
htmlWHERE[12] = "</div>"

htmlWHAT[0] = "<div class='l-summary-detail'><!-- content under the lastchange layer -->"
htmlWHAT[1] = "<div class='l-summary-questionname'>"
htmlWHAT[2] = "WHAT"
htmlWHAT[3] = "</div>"
htmlWHAT[4] = "<div class='l-summary-questionprompt'>"
htmlWHAT[5] = "Brand of the drink" 
htmlWHAT[6] = "</div>"
htmlWHAT[7] = "<div class='l-summary-response'>"
htmlWHAT[8] = ""
htmlWHAT[9] = "</div>"
htmlWHAT[10] = "<div class='l-summary-lastchange'><!-- visible if last changed record --></div>"
htmlWHAT[11] = "<div class='l-summary-background'><!-- content under the lastchange layer --></div>"
htmlWHAT[12] = "</div>"

htmlHOWMUCH[0] = "<div class='l-summary-detail'><!-- content under the lastchange layer -->"
htmlHOWMUCH[1] = "<div class='l-summary-questionname'>"
htmlHOWMUCH[2] = "HOW MUCH"
htmlHOWMUCH[3] = "</div>"
htmlHOWMUCH[4] = "<div class='l-summary-questionprompt'>"
htmlHOWMUCH[5] = "Amount you consumed" 
htmlHOWMUCH[6] = "</div>"
htmlHOWMUCH[7] = "<div class='l-summary-response'>"
htmlHOWMUCH[8] = ""
htmlHOWMUCH[9] = "</div>"
htmlHOWMUCH[10] = "<div class='l-summary-lastchange'><!-- visible if last changed record --></div>"
htmlHOWMUCH[11] = "<div class='l-summary-background'><!-- content under the lastchange layer --></div>"
htmlHOWMUCH[12] = "</div>"

htmlPICTURE[0] = "<div class='l-summary-detail'><!-- content under the lastchange layer -->"
htmlPICTURE[1] = "<div class='l-summary-questionname'>"
htmlPICTURE[2] = "PICTURE"
htmlPICTURE[3] = "</div>"
htmlPICTURE[4] = "<div class='l-summary-questionprompt'>"
htmlPICTURE[5] = "Photo of the brand of drink" 
htmlPICTURE[6] = "</div>"
htmlPICTURE[7] = "<div class='l-summary-response'>"
htmlPICTURE[8] = ""
htmlPICTURE[9] = "</div>"
htmlPICTURE[10] = "<div class='l-summary-lastchange'><!-- visible if last changed record --></div>"
htmlPICTURE[11] = "<div class='l-summary-background'><!-- content under the lastchange layer --></div>"
htmlPICTURE[12] = "</div>"

htmlDONE[0] = "<div class='l-summary-detail'><!-- content under the lastchange layer -->"
htmlDONE[1] = "<div class='l-summary-questionname'>"
htmlDONE[2] = "CONFIRMATION"
htmlDONE[3] = "</div>"
htmlDONE[4] = "<div class='l-summary-questionprompt'>"
htmlDONE[5] = "Confirm you are happy with the entry" 
htmlDONE[6] = "</div>"
htmlDONE[7] = "<div class='l-summary-response'>"
htmlDONE[8] = ""
htmlDONE[9] = "</div>"
htmlDONE[10] = "<div class='l-summary-lastchange'><!-- visible if last changed record --></div>"
htmlDONE[11] = "<div class='l-summary-background'><!-- content under the lastchange layer --></div>"
htmlDONE[12] = "</div>"


	if scriptsource.response is null then
		if iom.Info.User1 <> "" then
			select case iom.Info.User1.LCase()
			case "development"
			scriptsource.response = "https://d11as4oy583d1f.cloudfront.net/iframe-script.js"
			case "staging"
			scriptsource.response = "https://d2cgld9eorebye.cloudfront.net/iframe-script.js"
			case "production"
			scriptsource.response = "https://thediary.ipsos.com/iframe-script.js"
			case "localhost"
			scriptsource.response = "http://localhost:3000/iframe-script.js"			
			end select
		else
			scriptsource.response = "https://thediary.ipsos.com/iframe-script.js"
		end if
	end if
	
	if scriptSource.response <> "" then
		postMessageScript = MakeString("<script type='application/javascript' src='", scriptSource.response, "'>//Post message Script</script>")
	else
		postMessageScript = ""
	end if
stayinLoop = true

if IOM.SampleRecord["MinDate"] is null then
	sampleMinDate = (Now() - 3)
	When_MinDate = sampleMinDate
	sampleRecMinDate.response = sampleMinDate
else
	sampleMinDate = UnFormatUTC(IOM.SampleRecord["MinDate"])
	When_MinDate.response = sampleMinDate
	debug.Log("When_MinDate: " + when_MinDate.Response)
end if

if IOM.SampleRecord["MaxDate"] is null then
	sampleMaxDate = Now()
	When_MaxDate.response = sampleMaxDate
else
	sampleMaxDate = UnFormatUTC(IOM.SampleRecord["MaxDate"])
	When_MaxDate.response = sampleMaxDate
	debug.Log("When_MaxDate: " + when_MaxDate.Response)
end if



if IOM.SampleRecord["Previous"] is null or IOM.SampleRecord["Previous"] = "" then
	samplePrevious = ""
	What.Codes.Filter = {NoManual}
else
	samplePrevious = IOM.SampleRecord["Previous"]
	PreviousEntry.response = FixedTExts.Categories["StartPrevious"].Label.Text  + " " + samplePrevious
	What.Codes.Filter = null
	
end if

if iom.Info.IsDebug then
	IOM.LayoutTemplate = "local-formal.htm"
else
	IOM.LayoutTemplate = "formal.htm"
end if

IOM.QuestionTemplate = templateLocation + "question.htm"
Summary.LayoutTemplate = templateLocation + "formal-summary.htm"

'Summary.QuestionTemplate = templateLocation + "question-summary.htm"

IOM.Banners.AddNew("PageName", "")
IOM.Banners.AddNew("PageCustomProperties", "")
IOM.Banners.AddNew("PostMessage", postMessageScript)
set statusBanner = IOM.Banners.AddNew("Status", "")

Progress.json.Response = JSONSerialize(Progress_Create())

barcode.mustanswer = false
what.mustanswer = false
container.MustAnswer = false
picture.MustAnswer = false

AddCustomProperties(When_Entry, "When_Entry", MakeString("{'validation':{'min':'", FormatUTC(When_MinDate.response,false), "','max':'", FormatUTC(When_MaxDate.response, false), "'},'show':{'marks':true,'value':true,'terminators':true},'ticklabels':'20%','floodtovalue':false}"), "replace")
AddCustomProperties(what, "what", "{'displayicon':false,'listsize':12,'list':{'location':'internal','source':'a-list','valuefrom':'name','descriptionfrom':'name'},'showanswers':true,'mincharactersforlist':3,'notenoughcharacters':'type at least 3 characters to see a list of products containing what has been typed.','filtertype':'contains','placeholder':'Describe your drink, include the brand if you know it','noitemsinlist':'There are no drinks of that name in the list, you can accept this answer by tapping the tick','prompts':{'selection':'Brand Identified','listcount':'beverages found'}}", "replace")
what.QuestionTemplate = "question-database-brandlist.htm"

AddCustomProperties(PickContainer, "PickContainer", "{'displayicon':false,'listsize':4,'direction':'horizontal','list':{'location':'internal','source':'c-list','valuefrom':'id','descriptionfrom':'caption'},'showanswers':true,'mincharactersforlist':0,'filtertype':'contains','placeholder':' The container you drank from your drink','noitemsinlist':'There are no containers of that name in the list, you can accept this answer by tapping the tick','prompts':{'selection':'container','listcount':'containers found'}}", "replace")
PickContainer.QuestionTemplate = "question-database-containerlist.htm"


if what.response is null then
debug.Log("what response is null")
	what.Response.Value = fixedtexts.Categories.NoWhat.label.text
	progress.What.Response = What.response
else
	Progress.When.response = FormatUTC(when.response, true)
	Progress_Update(Progress, statusBanner)
end if		

If When.Response is null then 
debug.Log("what response is null")
	when.Response = When_MaxDate.Response
	Progress.When = FormatUTC(When_MaxDate.Response, true)	
end if



Progress.Status.Response = "Draft"
Progress_Update(Progress, statusBanner)
'Summary.Validation.Function = "CheckAllDetailsEntered"

lastQuestion = "NONE"
While stayinLoop
isItInComplete = (When.Response is null) or (What.Response is null) or (howmuch.Response is null) or (where.Response = {})
Summary.Categories.Filter = {when,where,what,howmuch}
if not isItIncomplete then
	Summary.Categories.Filter = Summary.Categories.Filter + {done}
end if

debug.Log("-------- LOOP -----------")
debug.Log(MakeString("WHEN: ", When.Response, " - ", When.Info.IsOnPath, " -- ", When.info.Offpathresponse))
debug.Log(MakeString("WHEN ENTRY: ", When_Entry.Response, " - ", When_Entry.Info.IsOnPath, " -- ", When_Entry.Info.Offpathresponse))
debug.Log(MakeString("WHAT: ", WHAT.Response, " - ", WHAT.Info.IsOnPath, " -- ", WHAT.Info.Offpathresponse))
debug.Log(MakeString("WHERE: ", WHERE.Response, " - ", WHERE.Info.IsOnPath, " -- ", WHERE.Info.Offpathresponse))
debug.Log(MakeString("HOWMUCH: ", HOWMUCH.Response, " - ", HOWMUCH.Info.IsOnPath, " -- ", HOWMUCH.Info.Offpathresponse))
debug.Log("-------- LOOP -----------")

	Summary.Response = null

	if When.Response is null or When.Response = 0 then
		htmlWHEN[8] = MakeWhen(When_Entry.response)
		ProgressBar = 1
	else
		When_Entry.response = When.response
		htmlWHEN[8] = MakeWhen(When.response)
		progressBar = 1
	end if
	
	if where.Response is  null then 
		contentWHERE = BuildContent(htmlWHERE, false, false)
	else
		htmlWHERE[8] = MakeString("<div class='l-summary-response-text'>", format(where.Response, "b"), "</div>")
		contentWHERE = BuildContent(htmlWHERE, true, (lastQuestion = "WHERE"))
		progressBar = progressBar + 1
	end if
	
	if what.Response is null then
		contentWHAT = BuildContent(htmlWHAT, false, false)
	else
		htmlWHAT[8] = MakeString("<div class='l-summary-response-text'>", WHAT.Response, "</div>")
		contentWHAT = BuildContent(htmlWHAT, true, (lastQuestion = "WHAT"))
		if What.Response <> fixedTexts.Categories.NoWhat.Label.Text then
			progressBar = progressBar + 1
		end if
	end if

	if howmuch.Response is null then
		contentHOWMUCH = BuildContent(htmlHOWMUCH, false, false)
	else
		htmlHOWMUCH[8] = MakeString("<div class='l-summary-response-text'>", HOWMUCH.Response, "ml", "</div>")
		contentHOWMUCH = BuildContent(htmlHOWMUCH, true, (lastQuestion = "HOWMUCH"))
		progressBar = progressBar + 1
	end if
	
	if picture.response is null or picture.Response = {No} then
		htmlDONE[8] = MakeString("<div class='l-summary-response-text'></div>")
		contentDone = BuildContent(htmlDONE, false, false)
	else
		htmlPICTURE[8] = MakeString("<div class='l-summary-response-text'>", format(Confirm.Response, "b"), "</div>")
		progressBar = progressBar + 1
	end if
	
	if confirm.response is null or confirm.Response = "{No}" then
		htmlPICTURE[8] = MakeString("<img class='l-summary-response-image' width='64px' height='64px' src='https://cdn.ipsosinteractive.com/sandbox/kevin.gray/passiveobservation/act/images/no_photo.svg' alt='", FixedTexts.Categories["NoPicture"].Label.text ,"'/>")
	else
		htmlPICTURE[8] = MakeString("<img class='l-summary-response-image' width='64px' height='64px' src='", WHAT.Response, "' alt='", FixedTexts.Categories["Picture"].Label.text, " ", What.Response ,"'/>")
		progressBar = progressBar + 1
	end if
	IOM.Info.EstimatedProgress = progressBar
	
	'contentHOWMUCH = BuildContent(htmlHOWMUCH, false, (lastQuestion = "HOWMUCH"))
	contentWHEN = 	BuildContent(htmlWHEN, true, (lastQuestion = "WHEN"))
	contentPICTURE = BuildContent(htmlPICTURE, true, (lastQuestion = "PICTURE"))
	
	Summary.Ask()
	select case Summary.Response.value
	case {when}
'IOM.LayoutTemplate = "pageoutput-label.htm"
		debug.log("Before:" + When_Entry.response)
		WHEN_Entry.Ask()
		debug.log("After:" + When_Entry.response)
		When.Response = unformatUTC(When_Entry.Response)
		debug.Log(MakeString("WHEN: ", when.Response))
		Progress.When.response = FormatUTC(when.response, true)
		Progress_Update(Progress, statusBanner)
		lastQuestion = "WHEN"
		
	case {where}
		where.Ask()
		lastQuestion = "WHERE"
		
	case {what}
	    what.Response = null
		What.ask()
		if what.Response.Coded then
			What.Response.coded = null
			What.Response = IOM.SampleRecord["Previous"]
		end if
		what.Response = what.response.replace("&", "&#38;").replace("'","&#39;")
		Progress.What = what.response
		Progress_Update(Progress, statusBanner)
		debug.Log(MakeString("WHAT: ", what.Response))
		lastQuestion = "WHAT"
		
	case {howmuch}
		Dim PickedItem
		Dim sizeArray
	    PickContainer.Ask()
		PickedItem = PickContainer.Response.LCase()
		debug.Log("container: " + PickedItem)
		
		dim itemCounter, curItem
'		for itemCounter = 0 to PickContainerLookup.categories.Len() - 1
'			curitem = PickContainerLookup.categories[itemCounter].label.text.lCase() 
'			debug.Log("check: " + curItem + "::length: " + ctext(curItem.len()) + ", " + ctext(PickedItem.len()))
'			if curItem = PickedItem then 
'				WhichContainerText.Response = PickContainerLookup.Categories[itemCounter].fullname
'				PickContainersizes.response = PickContainerSizes.categories[WhichContainerText.response]
'				WhichSize.categories.filter = ccategorical("{" + format(PickContainerSizes.response,"b") + "}")
'			end if
'		Next

		WhichContainerText.Response = PickContainer.response
		PickContainersizes.response = PickContainerSizes.categories[PickContainer.response]
		WhichSize.categories.filter = ccategorical(MakeString("{", PickContainerSizes.categories[PickContainer.response].label, "}"))
		
		Debug.Log("Container result: " + WhichContainerText.response)

		AddCustomProperties(AmountConsumed, "AmountConsumed", "{'values':{'min':1,'max':5,'position':'none'},'unit':{'image':{'width':'32px','height':'32px'}}}", "replace") 

		SizeandAmountPage.ask()

		HowMuch.Response = WhichSize.Categories[WhichSize.Response].Factor / 5 * AmountConsumed.Response 
		debug.Log("how much: " + ctext(Howmuch.Response))

		lastQuestion = "HWOMUCH"
		
	case {picture}
		Picture.Ask()
		lastQuestion = "PICTURE"
			
	case {done}
		Confirm.Ask()
		lastQuestion = "DONE"
		
	end select 
	stayinLoop = (confirm.Response <> {Yes})
		
end while


debug.Log("-------- AFTER -----------")
debug.Log(MakeString("WHEN: ", When.Response, " - ", When.Info.IsOnPath, " -- ", When.info.Offpathresponse))
debug.Log(MakeString("WHEN ENTRY: ", When_Entry.Response, " - ", When_Entry.Info.IsOnPath, " -- ", When_Entry.Info.Offpathresponse))
debug.Log(MakeString("WHAT: ", WHAT.Response, " - ", WHAT.Info.IsOnPath, " -- ", WHAT.Info.Offpathresponse))
debug.Log(MakeString("WHERE: ", WHERE.Response, " - ", WHERE.Info.IsOnPath, " -- ", WHERE.Info.Offpathresponse))
debug.Log(MakeString("HOWMUCH: ", HOWMUCH.Response, " - ", HOWMUCH.Info.IsOnPath, " -- ", HOWMUCH.Info.Offpathresponse))
debug.Log("-------- AFTER -----------")

isItInComplete = (When.Response is null) or (What.Response is null) or (howmuch.Response is null) or (where.Response = {})

if NOT isItInComplete then
	Progress.Status.Response = "Complete"
	IOM.LayoutTemplate = "Finished.htm"
	Progress_Update(Progress, statusBanner)
	IOM.Terminate(signals.sigCompleted)
else
	Progress.Status.Response = "Stopped"
	IOM.LayoutTemplate = "Stopped.htm"
	Progress_Update(Progress, statusBanner)
	IOM.Terminate(signals.sigStopped)
end if


function onInterviewEnd(theIOM)
dim statusBanner
dim isItInComplete
	set statusBanner = theIOM.Banners["Status"]
	isItInComplete = (TheIOM.Questions["When"].Response is null) or (theIOM.Questions["What"].Response is null) or (theIOM.Questions["howmuch"].Response is null) or (theIOM.Questions["where"].Response = {})

	if NOT isItInComplete then
		theIOM.Questions["Progress"].Status.Response = "Complete"
		theIOM.LayoutTemplate = "Finished.htm"
		Progress_Update(theIOM.Questions["Progress"], statusBanner)
		debug.Log("completed survey")
		theIOM.Terminate(signals.sigCompleted)
	else
		theIOM.Questions["Progress"].Status.Response = "Stopped"
		theIOM.LayoutTemplate = "Stopped.htm"
		Progress_Update(theIOM.Questions["Progress"], statusBanner)
		debug.Log("stopped survey")
		theIOM.Terminate(signals.sigStopped)
	end if
	
end function

Function Progress_Create()
dim newJSON
	newJSON = JsonDeserialize("{}")
	newJSON.status = ""
	newJSON.when = ""
	newJSON.what = 0
	Progress_Create = newJSON
end function

sub Progress_Update(theQuestion,theBanner)
dim stringDayofWeek, stringMonth
dim newJSON
	newJSON = JsonDeserialize(theQuestion.json)
	newJSON.status = theQuestion.status.response 
	newJSON.what = theQuestion.what
	newJSON.when = theQuestion.When
	theQuestion.Json.response = JSONSerialize(newJSON)
	theBanner.text = theQuestion.json.response 
end sub

function MakeWhen(theDate)
dim stringDay, stringDate, stringMonth, stringHour, stringMinute
	stringDay = WeekDayName(dateonly(theDate), true)
	stringDate = cText(DatePart(theDate, "d"))
	stringMonth = MonthName(DatePart(theDate,"m"),true)
	stringHour = cText(DatePart(theDate, "h"))
	stringMinute = cText(DatePart(theDate, "n"))
	
	if stringHour.Len() < 2 then stringHour = "0" + stringHour
	if stringMinute.Len() < 2 then stringMinute = "0" + stringMinute
	
MakeWhen = MakeString("<div class='l-summary-response-text'>", stringDay, " ", stringDate, "-", stringMonth ,"</div><div class='l-summary-response-text'>", stringHour, ":", stringMinute, "</div>")
end function

function FindBanner(theQuestion, theBannerName)
dim numberOfBanners
dim bannerFound
dim bannercount
	numberOfBanners = theQuestion.Banners.count
	bannerFound = false
	for bannerCount = 0 to numberOfBanners - 1
		if theQuestion.Banners[bannerCount].name = theBannerName then
			set FindBanner = theQuestion.Banners[bannerCount]
			exit function
		end if
	Next
	set FindBanner = null
end function

function AddCustomProperties(theQuestion, theQuestionName, theBannerContent, theAction)
dim questionName

	questionName = MakeString("_Q", theQuestionName.Replace("_", "__"))
	questionName = questionName.Replace("__Q","_Q")
	CreateBanner(theQuestion, "CustomProperties")
	
	SetCustomProperties(theQuestion, questionName, theBannerContent, theAction)
end function

function SetCustomProperties(theQuestion, theQuestionName, theBannerContent, theAction)
dim quote
dim bannerArray
dim bannerContent
	if theAction is null then theAction = "replace"
	
	quote = ChrW(34)
	debug.Log(MakeString("start banner content:", theBannerContent))
	bannerContent = theBannerContent.Replace("'", quote).Replace("%%","'").Replace("<","%lt%").Replace(">","%gt%")'.Replace("&","%amp;%")
	debug.Log(MakeString("complete banner content:", bannerContent))
	
	bannerContent = MakeString("<script type='text/javascript'>", "app.RegisterProperties(", quote, theQuestionName, quote, ",", bannerContent, ");</script>")
	debug.Log(MakeString("final banner content:", bannerContent))
	
	if theAction <> "replace" then
		theQuestion.Banners["CustomProperties"].text = MakeString(theQuestion.Banners["CustomProperties"].text, bannerContent)
	else
		theQuestion.Banners["CustomProperties"].text = bannerContent
	end if
end function

function CreateBanner(theQuestion, theBannerName)
dim bannerFound
	set bannerFound = FindBanner(theQuestion, theBannerName)
	if bannerFound is null then
		theQuestion.Banners.AddNew(theBannerName, "")
	end if
end function


function BuildRegisterContainer(theQuestion, theIndex, theName)
dim registerScript, registerBanner
dim questionIndex
dim questionName
dim stringScript, stringComponent, stringQuestionID, stringContainer
	questionIndex = MakeString("_Q", theIndex)
	registerScript = MakeString("<script data-questionid='", questionIndex, "'>app.registerComponent('oQuestionContainer','", questionIndex, "','", theName, "');</script>")

	theQuestion.Banners["RegisterContainer"].text = MakeString(theQuestion.Banners["RegisterContainer"].text, registerScript)
end function

function onAfterQuestionAsk(theQuestion, theIOM)
debug.Log("after question")
'debug.Log("Question:" + theQuestion.Questionname + ", response: " + ctext(theQuestion.response))
end function

function OnBeforeQuestionValidation(theQuestion, theIOM)
'debug.Log("before validation")
'if theQuestion.questionname = "GridDrugComboSingle" then theIOM.LayoutTemplate = "pageoutput-label.htm"
end function

function onBeforeQuestionAsk(theQuestion, theIOM)
'debug.Log("before question")
dim currentName, currentFullname, currentType, currentOrder
dim registerBanner
dim numberOfSubQuestions, counter, subQuestion, subName
dim InstructionBanner, warningBanner


currentname = theQuestion.QuestionName 
currentfullname = theQuestion.QuestionFullName
currenttype = theQuestion.QuestionType
	select case(thequestion.QuestionType)
	case QuestionTypes.qtBlock, QuestionTypes.qtPage
		numberOfSubQuestions = theQuestion.count 
		for counter = 0 to numberOfSubQuestions - 1
			set subQuestion = theQuestion[counter]
			subName = MakeString("_Q", currentName.Replace("_", "__"), "_Q", subQuestion.QuestionName.Replace("_", "__"))

			CreateBanner(subQuestion, "RegisterContainer")
			subQuestion.Banners["RegisterContainer"].text = ""

			setZIndex(subQuestion, theIOM)
			BuildRegisterContainer(subQuestion, counter, subName)

'			set instructionBanner = FindBanner(subQuestion, "Instruction")
'			if instructionBanner <> null then
'				PadBanner(instructionBanner)
'			end if
			
'			set warningBanner = FindBanner(subQuestion, "Warning")
'			if warningBanner <> null then
'				PadBanner(warningBanner)
'			end if

		Next	
		case else 
			CreateBanner(theQuestion, "RegisterContainer")
			theQuestion.Banners["RegisterContainer"].text = ""
	'this may need to loop for a table (sub questions) as in the non page version
			SetZIndex(theQuestion, theIOM)
			BuildRegisterContainer(theQuestion, 0, MakeString("_Q", theQuestion.QuestionName.Replace("_", "__")))
	
'			set instructionBanner = FindBanner(theQuestion, "Instruction")
'			if instructionBanner <> null then
'				PadBanner(instructionBanner)
'			end if
			
'			set warningBanner = FindBanner(theQuestion, "Warning")
'			if warningBanner <> null then
'				PadBanner(warningBanner)
'			end if
		end select
end function

function ComplexJSON_Create(theIOM, theCurrentSection, theArray)
dim curentItem
dim counter
dim arrayLength
dim newJSON
dim jsonStart, jsonFull
dim scriptStart, scriptEnd
dim quote
	quote = ChrW(34)
	newJSON = ""
	scriptStart = "<script>app.RegisterProperties('_Progress',"
	scriptEnd = ")</script>"
	jsonstart = MakeString("{'currentsection':", theCurrentSection, ",'sections':[")
	arrayLength = theArray.Len()
	for counter = 0 to arrayLength -1
		if newJSON <> "" then newJSON = MakeString(newJSON, ",")
		newJSON = MakeString(newJSON, theArray[counter])
	Next
	jsonFull = MakeString(jsonStart, newJSON, "]}").replace("'", quote)
	
	theIOM.Banners["CustomProgressBar"].Text = MakeString(scriptStart, jsonFull, scriptEnd)
	
	ComplexJSON_Create = MakeString(scriptStart, jsonFull, scriptEnd)
end function

function PageJSON_Create(theIOM, theJSON)
dim pageBanner
dim quote
dim scriptStart, scriptEnd
	scriptStart = "<script id='pageproperties'>app.RegisterProperties('Page',"
	scriptEnd = ")</script>"
	quote = ChrW(34)
	set pageBanner = theIOM.Banners["PageCustomProperties"]
	
	if theJSON <> "" then
		pageBanner.text = MakeString(scriptStart, theJSON.Replace("'", quote), scriptEnd)
	else
		pageBanner.Text = ""
	end if
	
end function

function PadBanner(theBanner)
debug.Log("padBanner: " + theBanner)
	if theBanner.text.Left("3") <> "<p>" then theBanner.text = MakeString("<p>", theBanner.text, "</p>")
end function

function CreateVisibilityRule(theRule)
dim newString 
	newString = theRule.replace("'", "%%").replace("_","__")
	newString = newString.Replace("__Q","_Q")
	CreateVisibilityRule = newString
end function

sub setZIndex(theQuestion,theIOM)
      if theQuestion.Style.ZIndex = NULL then
           select case theQuestion.QuestionDataType
          'Info
          case DataTypeConstants.mtNone
                theQuestion.Style.ZIndex = -10
                
          'Long/Double/Text
          case DataTypeConstants.mtLong,DataTypeConstants.mtDouble, DataTypeConstants.mtText
                theQuestion.Style.ZIndex = -20
                
          'Categorical
          case DataTypeConstants.mtCategorical
      		select case theQuestion.style.control.type

      		'single/multi-choice
      		case controltypes.ctCheckButton or controltypes.ctRadioButton
            	theQuestion.Style.ZIndex = -40

      		'dropdowns
            case controlTypes.ctDropList
            	theQuestion.style.zindex = -60

      		'combobox
            case controlTypes.ctComboList
            	theQuestion.style.zindex = -70
			end Select                      	
           end select
      end if     
end sub

sub CreateInformationPopup (theQuestion, theTitle, theContent)
dim informationBanner
dim bannerArray[6]
	CreateBanner(theQuestion, "Information")
	set informationBanner  = theQuestion.Banners["Information"]
	bannerArray[0] = "<summary class='a-label-summary'>"
	bannerArray[1] = theTitle
	bannerArray[2] = "</summary>"
	bannerArray[3] = "<div class='a-label-details'>"
	bannerArray[4] = theContent
	bannerArray[5] = "</div>"
	
	informationBanner.text = CombineArray(bannerArray, "")
end sub

function CombineArray(theArray, theBetween)
dim limit
dim counter 
dim newString
	newString = ""
	limit = ubound(theArray)
	for counter = 0 to limit
		newString = newString + theArray[counter]
		newString = newString + theBetween
	Next
	CombineArray = newString
end function

sub RotateGrid(theGrid, theOrientation)
      theGrid.style.orientation = theOrientation
end sub


'----------------------------
' Project specific functions
'============================

function CheckAllDetailsEntered(theQuestion, theIOM, theAttempt)
dim boolWhen, boolWhat, boolLocation, boolVolume, boolPicture

	if theQuestion.response <> {} then 
		CheckAllDetailsEntered = true
		exit function
	end if
	
	boolWhen = (theIOM.Questions["When"].response is not null)
	boolWhat = ((theIOM.Questions["What"].response is not null) or (theIOM.Questions["barcode"].response is not null))
	boolLocation = (theIOM.Questions["Where"].response <> {})
	boolVolume = ((theIOM.Questions["Container"].response is not null) or (theIOM.Questions["Container"].response.coded <> {}))
	boolPicture = ((theIOM.Questions["Picture"].response is not null) or (theIOM.Questions["Picture"].response.coded <> {}))
	
	if not boolWhen or not boolWhat or not boolLocation or not boolVolume or not boolPicture then 
	CheckAllDetailsEntered = false
	else
	CheckAllDetailsEntered = true
	end if
end function

   '----------------------------------------
    ' Question Type specific functions
    '----------------------------------------
    
	'    Summary Question
	'----------------------------------------
	function BuildContent(theHTML, theResponse, theLastChange)
	dim stringContent 
	dim quote
		stringContent = MakeString(theHTML[0], theHTML[1], theHTML[2], theHTML[3])
		if not theResponse then
			stringContent = MakeString(stringContent, theHTML[4], theHTML[5], theHTML[6])
		else
			stringContent = MakeString(stringContent, theHTML[7], theHTML[8], theHTML[9])
		end if
		'not required for ACT
		if theLastChange Then stringContent = MakeString(stringContent, theHTML[10])
		
		if theHTML[11] <> "" then stringContent = MakeString(stringContent, theHTML[11])
		
		'finish is off
		stringContent = MakeString(stringContent, theHTML[12])	
		quote = ChrW(34)	
		BuildContent = stringContent.Replace("'", quote)
	end function
	
	function When_Validate (theQuestion, theIOM, theAttempt)
	if theQuestion.response < theIOM.Questions["When_MinDate"].response then 
		theQuestion.Errors.AddNew("Invalid date", "Date too long ago")
		When_Validate = false
		exit function
	end if
	
	if theQuestion.response > theIOM.Questions["When_MaxDate"].response then
		theQuestion.Errors.AddNew("Invalid date", "Date in the future")
		When_Validate = false
	end if
	
	When_Validate = true
	
	end function
	
	function FormatUTC(theDate, theZIncluded)
	dim digitYear, digitMonth, digitDay, digitHour, digitMinute, digitSecond
	dim strYear, strMonth, strDay, strHour, strMinute, strSecond
	digitYear = YEar(theDate)
	digitMonth = Month(theDate)
	digitDay = day(theDate)
	digitHour = hour(theDate)
	digitMinute = minute(theDate)
	digitSecond  = second(theDate)
	strYear = ctext(digitYear)
	if digitMonth<10 then 
		strMonth = "0" + ctext(digitMonth)
	else
		strMonth = ctext(digitMonth)
	end if
	
	if digitDay<10 then 
		strDay = "0" + ctext(digitDay)
	else
		strDay = ctext(digitDay)
	end if
	
	if digitHour<10 then 
		strHour = "0" + ctext(digitHour)
	else
		strHour = ctext(digitHour)
	end if	

	
	if digitMinute<10 then 
		strMinute = "0" + ctext(digitMinute)
	else
		strMinute = ctext(digitMinute)
	end if		
	if theZIncluded then
		FormatUTC = MakeString(strYear, "-", strMonth, "-", strDay, "T", strHour, ":", strMinute, ":", "00Z")
	else
		FormatUTC = MakeString(strYear, "-", strMonth, "-", strDay, "T", strHour, ":", strMinute, ":", "00")
	end if	
	end function
	
	function UnFormatUTC(theString)
	dim findDate, findEnd, findDecimal
	dim stringDate, stringTime, baseDate
	dim convertedDate, convertedTime
	dim stringYear, stringMonth, stringDay, stringHour, stringMinute, stringMonthName
	dim monthList[13]
	dim stringMilitary
	monthList[1] = "Jan"
	monthList[2] = "Feb"
	monthList[3] = "Mar"
	monthList[4] = "Apr"
	monthList[5] = "May"
	monthList[6] = "Jun"
	monthList[7] = "Jul"
	monthList[8] = "Aug"
	monthList[9] = "Sep"
	monthList[10] = "Oct"
	monthList[11] = "Nov"
	monthList[12] = "Dec"
	
	debug.Log(Makestring("first date:", theString))
		stringYear = left(theString, 4)
		stringMonth = mid(thestring, 5,2)
		stringDay = mid(theString, 8,2)
		stringHour = mid(theString, 11,2)
		stringMinute = mid(theString,14,2)
		stringMonthName = monthList[clong(stringMonth)]
		stringMilitary = MakeString(stringDay, "-", stringMonthName, "-", stringYear, " ", stringHour, ":", stringMinute)

		convertedDate = cdate(stringMilitary)
		UnFormatUTC = convertedDate
	end function
End Routing
