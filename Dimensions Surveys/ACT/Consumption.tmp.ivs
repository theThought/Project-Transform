Metadata(en-US, Question, Label)

Summary "" 
style(zIndex=-40)
categorical[1]
{
when "WHEN",
where "LOCATION",
what "WHAT",
howmuch "HOW MUCH",
picture "PICTURE"
};

ProgressJSON "{ProgressJSON}" 
style(zIndex=-10)
info;

Progress "" block fields
(
Status "Progress Status" style(zIndex=-20, width="50%") text[..20];
When "Progress When" style(zIndex=-20, width="50%") date;
What "Progress What" style(zIndex=-20, width="50%") text[..300];
json "" style(zIndex=-20, width="90%") text[..400];
);



'-------------------
'  Survey Questions
'===================
   
When "Indicate the time when you finished consumption" 
style(zIndex=-20, width="75%")
DATE;

Where "Where you were" 
style(zIndex=-40)
categorical[1]
{
Home "My Home",
otherhome "Someone Else's Home",
Bar "Bar/Lounge/Club incl. Sports Bar",
Restaurant,
unLicensed "Cottage/Chalet/Vacation Home/Camp",
Licensed "Hotel/Motel/Banquet Hall",
OtherPlace "Other location"
};

Category "Select the type of container from which you consumed your drink" 
style(zIndex=-40)
categorical[1]
{
Beer "Beer",
Wine "Wine",
Spirits "Spirits (cocktail or straight",
Cider "Cider",
Coolers "Flavored alcoholic beverages",
premixed "Pre-mixed or ready-to-drink cocktails",
hard "Hard Seltzer or Hard Soda",
othertype "Other alcoholic beverages"
};

What "Describe the product consumed or scan the product’s barcode" 
style(zIndex=-20, width="75%")
text[..500]
Codes ({NoManual "" NA});

Barcode "Scan the barcode of the product you consumed" 
style(zIndex=-20, width="75%")
text[..25]
Codes ({NoScan "" NA});

Container "" 
style(zIndex-20, width="75%")
text[..500]
codes ({NoContainer "" NA});

Picture "Take a photo of the brand of product you consumed" 
style(zIndex=-20, width="75%")
text[..500]
Codes ({
RefusedPicture "I don't want to provide a picture" exclusive,
UnablePicture "I cannot provide a picture" exclusive, 
NoPicture "" NA
});

QTY "" 
style(zIndex=-20, width="5em")
long[0..100]; 

WhichWhat "" 
style(zIndex=-40)
categorical[1]
{
barcode "Scan",
what "Enter"
};

HowMuchPage "" Page (Category, Qty);

    SummaryPage ""
    page(
        Summary,
        Progress
    );
    
WhatPage "" Page (WhichWhat,What,Barcode);
End Metadata
Routing(Web)

dim templateLocation
dim visibilityRule
dim stayinLoop


stayinLoop = true

IOM.LayoutTemplate = "formal.htm"

IOM.QuestionTemplate = templateLocation + "question.htm"

IOM.Banners.AddNew("PageName", "")
IOM.Banners.AddNew("PageCustomProperties", "")

ProgressJSON.Response = JSONSerialize(Progress_Create())

While stayinLoop
ProgressJSON.Response = Progress_Update(ProgressJSON.Response, Progress)
SummaryPage.Ask()
select case Summary.Response.value
case {when}
	when.Ask()
case {where}
	where.Ask() 
case {what}
	WhatPage.ask()
case {howmuch}
	container.Ask()
	qty.Ask()
case {picture}
	Picture.Ask()
end select 

Function Progress_Create()
dim newJSON
	newJSON = JsonDeserialize("{}")
	newJSON.status = ""
	newJSON.when = ""
	newJSON.what = 0
	Progress_Create = newJSON
end function

Function Progress_Update(theJSON, theQuestion)
dim stringDayofWeek, stringMonth
dim newJSON
	newJSON = JsonDeserialize(theJSON)
	newJSON.status = theQuestion.status.response 
	newJSON.what = theQuestion.what
	newJSON.when = LocalToUTCTime(theQuestion.When)
	Progress_Update = theJSON
end function

function FindBanner(theQuestion, theBannerName)
dim numberOfBanners
dim bannerFound
dim bannercount
	numberOfBanners = theQuestion.Banners.count
	bannerFound = false
	for bannerCount = 0 to numberOfBanners - 1
		if theQuestion.Banners[bannerCount].name = theBannerName then
			set FindBanner = theQuestion.Banners[bannerCount]
			exit function
		end if
	Next
	set FindBanner = null
end function

function AddCustomProperties(theQuestion, theQuestionName, theBannerContent, theAction)
dim questionName

	questionName = MakeString("_Q", theQuestionName.Replace("_", "__"))
	questionName = questionName.Replace("__Q","_Q")
	CreateBanner(theQuestion, "CustomProperties")
	
	SetCustomProperties(theQuestion, questionName, theBannerContent, theAction)
end function

function SetCustomProperties(theQuestion, theQuestionName, theBannerContent, theAction)
dim quote
dim bannerArray
dim bannerContent
	if theAction is null then theAction = "replace"
	
	quote = ChrW(34)
	debug.Log(MakeString("start banner content:", theBannerContent))
	bannerContent = theBannerContent.Replace("'", quote).Replace("%%","'").Replace("<","%lt%").Replace(">","%gt%")'.Replace("&","%amp;%")
	debug.Log(MakeString("complete banner content:", bannerContent))
	
	bannerContent = MakeString("<script type='text/javascript'>", "app.RegisterProperties(", quote, theQuestionName, quote, ",", bannerContent, ");</script>")
	debug.Log(MakeString("final banner content:", bannerContent))
	
	if theAction <> "replace" then
		theQuestion.Banners["CustomProperties"].text = MakeString(theQuestion.Banners["CustomProperties"].text, bannerContent)
	else
		theQuestion.Banners["CustomProperties"].text = bannerContent
	end if
end function

function CreateBanner(theQuestion, theBannerName)
dim bannerFound
	set bannerFound = FindBanner(theQuestion, theBannerName)
	if bannerFound is null then
		theQuestion.Banners.AddNew(theBannerName, "")
	end if
end function


function BuildRegisterContainer(theQuestion, theIndex, theName)
dim registerScript, registerBanner
dim questionIndex
dim questionName
dim stringScript, stringComponent, stringQuestionID, stringContainer
	questionIndex = MakeString("_Q", theIndex)
	registerScript = MakeString("<script data-questionid='", questionIndex, "'>app.registerComponent('oQuestionContainer','", questionIndex, "','", theName, "');</script>")

	theQuestion.Banners["RegisterContainer"].text = MakeString(theQuestion.Banners["RegisterContainer"].text, registerScript)
end function

function onAfterQuestionAsk(theQuestion, theIOM)
debug.Log("after question")
'debug.Log("Question:" + theQuestion.Questionname + ", response: " + ctext(theQuestion.response))
end function

function OnBeforeQuestionValidation(theQuestion, theIOM)
'debug.Log("before validation")
'if theQuestion.questionname = "GridDrugComboSingle" then theIOM.LayoutTemplate = "pageoutput-label.htm"
end function

function onBeforeQuestionAsk(theQuestion, theIOM)
'debug.Log("before question")
dim currentName, currentFullname, currentType, currentOrder
dim registerBanner
dim numberOfSubQuestions, counter, subQuestion, subName
dim InstructionBanner, warningBanner


currentname = theQuestion.QuestionName 
currentfullname = theQuestion.QuestionFullName
currenttype = theQuestion.QuestionType
	select case(thequestion.QuestionType)
	case QuestionTypes.qtBlock, QuestionTypes.qtPage
		numberOfSubQuestions = theQuestion.count 
		for counter = 0 to numberOfSubQuestions - 1
			set subQuestion = theQuestion[counter]
			subName = MakeString("_Q", currentName.Replace("_", "__"), "_Q", subQuestion.QuestionName.Replace("_", "__"))

			CreateBanner(subQuestion, "RegisterContainer")
			subQuestion.Banners["RegisterContainer"].text = ""

			setZIndex(subQuestion, theIOM)
			BuildRegisterContainer(subQuestion, counter, subName)

'			set instructionBanner = FindBanner(subQuestion, "Instruction")
'			if instructionBanner <> null then
'				PadBanner(instructionBanner)
'			end if
			
'			set warningBanner = FindBanner(subQuestion, "Warning")
'			if warningBanner <> null then
'				PadBanner(warningBanner)
'			end if

		Next	
		case else 
			CreateBanner(theQuestion, "RegisterContainer")
			theQuestion.Banners["RegisterContainer"].text = ""
	'this may need to loop for a table (sub questions) as in the non page version
			SetZIndex(theQuestion, theIOM)
			BuildRegisterContainer(theQuestion, 0, MakeString("_Q", theQuestion.QuestionName.Replace("_", "__")))
	
'			set instructionBanner = FindBanner(theQuestion, "Instruction")
'			if instructionBanner <> null then
'				PadBanner(instructionBanner)
'			end if
			
'			set warningBanner = FindBanner(theQuestion, "Warning")
'			if warningBanner <> null then
'				PadBanner(warningBanner)
'			end if
		end select
end function

function ComplexJSON_Create(theIOM, theCurrentSection, theArray)
dim curentItem
dim counter
dim arrayLength
dim newJSON
dim jsonStart, jsonFull
dim scriptStart, scriptEnd
dim quote
	quote = ChrW(34)
	newJSON = ""
	scriptStart = "<script>app.RegisterProperties('_Progress',"
	scriptEnd = ")</script>"
	jsonstart = MakeString("{'currentsection':", theCurrentSection, ",'sections':[")
	arrayLength = theArray.Len()
	for counter = 0 to arrayLength -1
		if newJSON <> "" then newJSON = MakeString(newJSON, ",")
		newJSON = MakeString(newJSON, theArray[counter])
	Next
	jsonFull = MakeString(jsonStart, newJSON, "]}").replace("'", quote)
	
	theIOM.Banners["CustomProgressBar"].Text = MakeString(scriptStart, jsonFull, scriptEnd)
	
	ComplexJSON_Create = MakeString(scriptStart, jsonFull, scriptEnd)
end function

function PageJSON_Create(theIOM, theJSON)
dim pageBanner
dim quote
dim scriptStart, scriptEnd
	scriptStart = "<script id='pageproperties'>app.RegisterProperties('Page',"
	scriptEnd = ")</script>"
	quote = ChrW(34)
	set pageBanner = theIOM.Banners["PageCustomProperties"]
	
	if theJSON <> "" then
		pageBanner.text = MakeString(scriptStart, theJSON.Replace("'", quote), scriptEnd)
	else
		pageBanner.Text = ""
	end if
	
end function

function PadBanner(theBanner)
debug.Log("padBanner: " + theBanner)
	if theBanner.text.Left("3") <> "<p>" then theBanner.text = MakeString("<p>", theBanner.text, "</p>")
end function

function CreateVisibilityRule(theRule)
dim newString 
	newString = theRule.replace("'", "%%").replace("_","__")
	newString = newString.Replace("__Q","_Q")
	CreateVisibilityRule = newString
end function

sub setZIndex(theQuestion,theIOM)
      if theQuestion.Style.ZIndex = NULL then
           select case theQuestion.QuestionDataType
          'Info
          case DataTypeConstants.mtNone
                theQuestion.Style.ZIndex = -10
                
          'Long/Double/Text
          case DataTypeConstants.mtLong,DataTypeConstants.mtDouble, DataTypeConstants.mtText
                theQuestion.Style.ZIndex = -20
                
          'Categorical
          case DataTypeConstants.mtCategorical
      		select case theQuestion.style.control.type

      		'single/multi-choice
      		case controltypes.ctCheckButton or controltypes.ctRadioButton
            	theQuestion.Style.ZIndex = -40

      		'dropdowns
            case controlTypes.ctDropList
            	theQuestion.style.zindex = -60

      		'combobox
            case controlTypes.ctComboList
            	theQuestion.style.zindex = -70
			end Select                      	
           end select
      end if     
end sub

sub CreateInformationPopup (theQuestion, theTitle, theContent)
dim informationBanner
dim bannerArray[6]
	CreateBanner(theQuestion, "Information")
	set informationBanner  = theQuestion.Banners["Information"]
	bannerArray[0] = "<summary class='a-label-summary'>"
	bannerArray[1] = theTitle
	bannerArray[2] = "</summary>"
	bannerArray[3] = "<div class='a-label-details'>"
	bannerArray[4] = theContent
	bannerArray[5] = "</div>"
	
	informationBanner.text = CombineArray(bannerArray, "")
end sub

function CombineArray(theArray, theBetween)
dim limit
dim counter 
dim newString
	newString = ""
	limit = ubound(theArray)
	for counter = 0 to limit
		newString = newString + theArray[counter]
		newString = newString + theBetween
	Next
	CombineArray = newString
end function

sub RotateGrid(theGrid, theOrientation)
      theGrid.style.orientation = theOrientation
end sub

End Routing
