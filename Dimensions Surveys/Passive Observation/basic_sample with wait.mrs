'==========================================================
'Licensed Materials - Property of IBM
'
'IBM SPSS Products: Data Collection
'
'(C) Copyright IBM Corp. 2001, 2011
'
'US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP 
'Schedule Contract with IBM Corp.
'==========================================================

' Interviewer Server 6.0.1
' Last updated:  2011-02-18


' *******************************************************************************
' basic_sample.mrs
' This is the standard script. The script demonstrates a scenario where
' once a sample has completed an interview it will not be able to be used
' again.
' The script pends and completes quotas if a Quota named Expressions
' exists.
' *******************************************************************************

' *******************************************************************************
' IBM SPSS Data Collection constants
#include "Constants.mrs"

' *******************************************************************************
' CLIENT SPECIFIC SECTION
' Update these constants and functions as require
'
' Each of the functions in this file is described in comments that describe when
' the function is called and the supplied parameters.
' For more information, consult the DDL, in particular the Sample Management
' topics under Professional | Interview Scripting.



' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' ToDo - Place your specific constants here
' Strings
Const DISPLAY_ACTIVEPO = "If a survey is accessed multiple times in a short period we implement an anti-fraud delay.  We will return you to your diary, please try again in {Timeout} minutes to restart."

' Queues
' Sample Fields
' Return Codes / Call Outcomes
' Other constants
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' Set PASS_QUOTA_IF_ANY_PASS to True if you want the respondent to continue if any
' of the quota cells that he/she falls into are below quota.  Set to False if you
' want the respondent to fail the quota check if any cell that he/she falls into
' is over quota.
Const PASS_QUOTA_IF_ANY_PASS = True
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' Pend all specifies if all quotas should be pended or just Expressions quotas.
' If you are using the method where you setup interview script questions with the
' same names as sample fields in order to create sample quotas then change to 
' True to Pend at the top level.
Const PEND_ALL = False
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


' *******************************************************************************
' Description:  This function is called when a record is selected but then rejected. 
' The function allows processing further processing of the record based on the 
' reject reason before it is moved to the UNUSABLE queue.
'
' Parameters:
' LogStart - Includes the -P -R -I log parameters that initialize the Project,
'    RespondentID and InterviewerID log sections
' SampleRec - The sample record being rejected
' Reason - String indicating the reason that the record was rejected
Sub RejectRecord_ClientSpecific(LogStart, SampleRec, Reason)

    Log.Log(LogStart + "RejectRecord_ClientSpecific:  Entered:  " + _
            "SampleRec = " + CText(SampleRec.Fields[FIELD_ID]) + ", " + _
            "Reason = " + Reason, _
            logLevels.LOGLEVEL_TRACE)
            
    Select Case Reason          
        Case "Quota"
            ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            ' ToDo - Additional processing for records rejected because they are over quota
            ' If you update the SampleRec use SampleRec.WriteRecord() to write the updates
            ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            
    End Select
    
    Log.Log(LogStart + "RejectRecord_ClientSpecific:  Exiting", logLevels.LOGLEVEL_TRACE)

End Sub


' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' ToDo - Set bChaining to True to enable chaining for web projects
' If chaining is enabled a FIELD_PROJECT SampleField must be included and the 
' proper project names specified as PROJECT1 and PROJECT2.  In addition, extra 
' serial fields must be specified As FIELD_SERIAL1 and FIELD_SERIAL2.
' These settings are used in AuthenticateSampleRec.
Dim bChaining
bChaining = False
Const FIELD_PROJECT = "Project"
Const PROJECT1 = "Project1Name"
Const PROJECT2 = "Project2Name"
Const FIELD_SERIAL1 = "Serial1"
Const FIELD_SERIAL2 = "Serial2"
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


' *******************************************************************************
' Description:  This function is called by AuthenticateSampleRec if all standard
' authentication checks fail.  Add script here to create a new sample record if
' required.
'
' Parameters:
' LogStart - Includes the -P -R -I log parameters that initialize the Project,
'    RespondentID and InterviewerID log sections
' SampleFields - SampleFields passed in from the web browser for Authentication,
'    typically includes an ID and a password
Function AuthenticateSampleRec_ClientSpecific(LogStart, SampleFields)
    Dim SampleRec
    Dim LogMsg

    Log.Log(LogStart + "AuthenticateSampleRec_ClientSpecific:  Entered", logLevels.LOGLEVEL_TRACE)
    
    ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ' ToDo - Add your specific authentication checks here and return a record if found
    Set SampleRec = Null
    ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    
    LogMsg = LogStart + "AuthenticateSampleRec_ClientSpecific:  Returning:  "
    If IsNullObject(SampleRec) Then
        LogMsg = LogMsg + "No records found"
    Else
        LogMsg = LogMsg + "Found a record"
    End If
    Log.Log(LogMsg, logLevels.LOGLEVEL_TRACE)
    
    Set AuthenticateSampleRec_ClientSpecific = SampleRec    
End Function


' *******************************************************************************
' Description:  The functions ReturnSampleRec_DCCodes_ClientSpecific and 
' ReturnSampleRec_ClientCodes_ClientSpecific are called by ReturnSampleRec to handle
' IBM SPSS Data Collection return codes and client return codes respectively.
' Update this function to change the default handling of Data Collection provided
' return codes and update ReturnSampleRec_ClientCodes_ClientSpecific to handle
' your additional return codes.
' These functions are called by ReturnSampleRec after it has initialized 
' SampleFields and finishing quotas if required.
'
' Parameters:
' LogStart - Includes the -P -R -I log parameters that initialize the Project,
'    RespondentID and InterviewerID log sections
' ReturnRec - Sample record being returned.  View and/or modify sample fields using
'    ReturnRec.SampleFields
' SampleRecReturnCode - Call outcome chosen by the interviewer as a number
'
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' ToDo - Update this function to change how Data Collection defined return codes 
' are handled
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Function ReturnSampleRec_DCCodes_ClientSpecific(LogStart, ReturnRec, SampleRecReturnCode)
    Dim bHandled
    Dim TimedOut
    
    Log.Log(LogStart + "ReturnSampleRec_DCCodes_ClientSpecific:  Entered:  " + _
            "SampleRecReturnCode.Name = " + SampleRecReturnCode.Name, _
            logLevels.LOGLEVEL_TRACE)
    
    bHandled = True
    
    Select Case (SampleRecReturnCode.Code)
      
    ' Move to the COMPLETED queue
    Case CODE_COMPLETED
        Queues.MoveSampleRec(QUEUE_COMPLETED, ReturnRec)
      
      
    ' Terminated with complete from interview script     
    Case CODE_EARLYCOMPLETE
        Queues.MoveSampleRec(QUEUE_COMPLETED, ReturnRec)

    ' These interviews have been stopped using the Stop
    ' button or timed out 
    Case CODE_STOPPED ' Stopped or TimedOut
      ' Check if the interview has been timed out
      ' The TimedOut property should always exist in InterviewProperties  
      TimedOut = 1
      TimedOut = InterviewProperties.Item(IVPROPS_TIMEDOUT).Value
      If (TimedOut = 1) Then
         Queues.MoveSampleRec(QUEUE_TIMED_OUT, ReturnRec)
      Else
         Queues.MoveSampleRec(QUEUE_STOPPED, ReturnRec)
      End If

    ' Interview failure, move sample to interview failed queue
    ' It can be restarted from there
    Case CODE_FAILED
        Queues.MoveSampleRec(QUEUE_FAILED, ReturnRec)


    Case CODE_OVERQUOTA
        Queues.MoveSampleRec(QUEUE_OVERQUOTA, ReturnRec)
      
   ' A different Code could be due to using signal in the interview script
    Case Else
        bHandled = False
    End Select

    Log.Log(LogStart + "ReturnSampleRec_DCCodes_ClientSpecific:  Returning " + CText(bHandled), logLevels.LOGLEVEL_TRACE)

    ReturnSampleRec_DCCodes_ClientSpecific = bHandled
End Function


' *******************************************************************************
' Description:  The functions ReturnSampleRec_DCCodes_ClientSpecific and 
' ReturnSampleRec_ClientCodes_ClientSpecific are called by ReturnSampleRec to handle
' IBM SPSS Data Collection return codes and client return codes respectively.
' Update this function to add handling for return codes that are specific to your
' site.
' These functions are called by ReturnSampleRec after it has initialized 
' SampleFields and finishing quotas if required.
'
' Parameters:
' LogStart - Includes the -P -R -I log parameters that initialize the Project,
'    RespondentID and InterviewerID log sections
' ReturnRec - Sample record being returned.  View and/or modify sample fields using
'    ReturnRec.SampleFields
' SampleRecReturnCode - Call outcome chosen by the interviewer as a number
Function ReturnSampleRec_ClientCodes_ClientSpecific(LogStart, ReturnRec, SampleRecReturnCode)
    Dim bHandled

    Log.Log(LogStart + "ReturnSampleRec_ClientCodes_ClientSpecific:  Entered:  " + _
            "SampleRecReturnCode.Name = " + SampleRecReturnCode.Name, _
            logLevels.LOGLEVEL_TRACE)
    
    bHandled = True
    
'    Select Case (SampleRecReturnCode.Code)
    ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ' ToDo - Add client specific return codes here
'    Case X
'    Case Else
        bHandled = False
'    End Select
    ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    
    Log.Log(LogStart + "ReturnSampleRec_ClientCodes_ClientSpecific:  Returning " + CText(bHandled), logLevels.LOGLEVEL_TRACE)    

    ReturnSampleRec_ClientCodes_ClientSpecific = bHandled
End Function



' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' ToDo - Add client specific functions here
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'==========================================================
'Licensed Materials - Property of IBM
'
'IBM SPSS Products: Data Collection
'
'(C) Copyright IBM Corp. 2001, 2011
'
'US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP 
'Schedule Contract with IBM Corp.
'==========================================================

' Interviewer Server 6.0
' Last updated:  2011-03-22


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' MainFunctions.mrs
' Contains the basic functions required by the system, GetSampleRec,
' AuthenticateSampleRec, ReturnSampleRec
'
' These functions are tested as part of the Data Collection system and
' changes to this file may not be supported.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


#ifdef INCLUDE_TELEPHONE
' *******************************************************************************
' This function implements the number selection rules
Sub GetSampleRec(SampleResult, SampleFields)
    Dim dtNow
    Dim InterviewerID
    Dim strMainWhere
    Dim strTimeZonesWhere, strIntQualsWhere, strGroupDialWhere, strClientSpecificWhere
    Dim bPrioritizeRecalls
    Dim LogStart, LogMsg
    Dim strOrderBy_FRESH
    Dim HasOverride
    Dim OverrideWhereClause
    Dim OverrideHighPriority
    Dim strMainWhereOverride
    Dim arrPrioritizationClauses[2]
    Dim strPrioritizationWhere, strPrioritizationOrderBy
    Dim strClientSpecificWhereQueueSpecific ' Currently used for APPOINTMENT, FRESH and RECALL queues only
    
    On Error GoTo ErrorHandler
     
    LogStart = CreateLogStart(SampleFields) + "GetSampleRec:  "
    dtNow = Now("UTC")
    LogMsg = LogStart + "Entered"
    InterviewerID = GetInterviewerProp(IVERPROPS_INTERVIEWERID)
    If (InterviewerID <> "") Then
        LogMsg = LogMsg + ", InterviewerID = " + InterviewerID
    End If
    LogMsg = LogMsg + ", current time (UTC) = " + CreateCanonicalDateTime(dtNow)
    Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)
    
    ' Determine the number of records to return
    Dim MaxRecordsRequired
    MaxRecordsRequired = GetRecordsRequired()

    ' Get a specific record if SampleFields are passed in
    If (HandleSpecificRequests(LogStart, SampleFields, SampleResult, InterviewerID)) Then
        If Not IsNullObject(SampleResult.SampleRec) Then
            UseThisSampleRecForCATI_Single(LogStart, SampleResult.SampleRec, InterviewerID)
            If (IsDayPartSet(LogStart)) Then
                Dim DayPartParams
                Set DayPartParams = GetCATIParamByPath(LogStart, "DayPartConfiguration", Null)
                CreateDayPartTempField(LogStart, SampleResult.SampleRec, DayPartParams)
            End If
            SampleResult.Code = RESULT_SUCCESS
        Else
            LogMsg = LogStart + "HandleSpecificRequests did not find specified record"
            Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)
            SampleResult.Code = RESULT_NO_RECORDS
        End If
        Exit Sub
    End If
      
    strTimeZonesWhere = CreateTimeZonesWhereClause(LogStart, False)
    If (strTimeZonesWhere = "No valid timezones") Then
        LogMsg = LogStart + strTimeZonesWhere
        Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)
        SampleResult.Code = RESULT_NO_RECORDS
        Exit Sub
    End If
    
    strIntQualsWhere = CreateInterviewerQualificationsWhereClause(LogStart)
    
    If (strIntQualsWhere = "Filter is invalid") Then
        SampleResult.Code = RESULT_FAILURE
        Exit Sub
    End If
    
    strGroupDialWhere = CreateGroupDialWhereClause(LogStart)
    
    strClientSpecificWhere = GetWhereClause_ClientSpecific(LogStart, "ALL")
      
    If (strTimeZonesWhere <> "") Then
        strMainWhere = strTimeZonesWhere
    End If
    If (strIntQualsWhere <> "") Then
        strMainWhere = strMainWhere + IIf(strMainWhere <> "", " AND ", "") + strIntQualsWhere
    End If
    If (strGroupDialWhere <> "") Then
        strMainWhere = strMainWhere + IIf(strMainWhere <> "", " AND ", "") + strGroupDialWhere
    End If
    If (strClientSpecificWhere <> "") Then
        ' Ensure parentheses around the client specific where
        strMainWhere = strMainWhere + IIf(strMainWhere <> "", " AND ", "") + "(" + strClientSpecificWhere + ")"
    End If    
    
    If (CreatePrioritizationWhereOrderClause(LogStart, arrPrioritizationClauses)) Then
        strPrioritizationWhere = arrPrioritizationClauses[ARR_WHERE]
        strPrioritizationOrderBy = arrPrioritizationClauses[ARR_ORDERBY]
    End If

    OverrideWhereClause = GetCATIParamByPath(LogStart, "Override/WhereClause", Null)
    OverrideHighPriority = GetCATIParamByPath(LogStart, "Override/HighPriority", Null)

    ' The override where clause also includes the main filters
    strMainWhereOverride = strMainWhere + IIf(strMainWhere <> "", " AND ", "") + "(" + OverrideWhereClause + ") "
    
    HasOverride = Not(OverrideWhereClause Is Null) And OverrideWhereClause <> "" And OverrideHighPriority = 1

    ' Check the APPOINTMENTs queue for appointments made with respondents (OVERRIDE First!)
    strClientSpecificWhereQueueSpecific = GetWhereClause_ClientSpecific(LogStart, QUEUE_APPOINTMENT)
    If HasOverride Then
        Set SampleResult.SampleRecs = HandleAppointments(LogStart, _
                    NumSampleRecsInBatch, MaxRecordsRequired, _
                    AddToWhere(strMainWhereOverride, strClientSpecificWhereQueueSpecific), _
                    InterviewerID, strPrioritizationOrderBy)
        If Not IsNullObject(SampleResult.SampleRecs) Then
            UseThisSampleRecsForCATI(LogStart, SampleResult, InterviewerID, True)
            Exit Sub
        End If
    End If
    ' If Override is not switched on or failed, do the standard way
    Set SampleResult.SampleRecs = HandleAppointments(LogStart, _
                NumSampleRecsInBatch, MaxRecordsRequired, _
                AddToWhere(strMainWhere, strClientSpecificWhereQueueSpecific), _
                InterviewerID, strPrioritizationOrderBy)
    If Not IsNullObject(SampleResult.SampleRecs) Then
        UseThisSampleRecsForCATI(LogStart, SampleResult, InterviewerID, False)
        Exit Sub
    End If
    
    bPrioritizeRecalls = PrioritizeRecalls(LogStart)
    
    strOrderBy_FRESH = GetCATIParamByPath(LogStart, "OrderBy/FRESH", Null)

    ' First check if there are any overrides...
    If (HasOverride) Then
        ' Add the prioritization where clause to all queues other than APPOINTMENT to filter
        ' out values with 0 order/weight
        If (strPrioritizationWhere <> "") Then
            If (strMainWhereOverride <> "") Then
                strMainWhereOverride = RemoveLastAndInWhereClause(strMainWhereOverride) + " AND "
            End If
            strMainWhereOverride = strMainWhereOverride + strPrioritizationWhere
        End If
      
       ' HandleQueues scans the queues other than APPOINTMENT
       ' If record(s) are found in any queue, the records are processed and 
       ' SampleResult.Code is set to RESULT_SUCCESS
       HandleQueues(LogStart, HasOverride, bPrioritizeRecalls, InterviewerID, _
                      SampleResult, NumSampleRecsInBatch, MaxRecordsRequired, _
                      strMainWhereOverride, strPrioritizationOrderBy, strOrderBy_FRESH)
       If (SampleResult.Code = RESULT_SUCCESS) Then
           Exit Sub
       End If
    End If
   
    ' Add the prioritization where clause to all queues other than APPOINTMENT to filter
    ' out values with 0 order/weight
    If (strPrioritizationWhere <> "") Then
        If (strMainWhere <> "") Then
            strMainWhere = RemoveLastAndInWhereClause(strMainWhere) + " AND "
        End If
        strMainWhere = strMainWhere + strPrioritizationWhere
    End If
    
    ' Fall back and if no overrides needed...
    HandleQueues(LogStart, False, bPrioritizeRecalls, InterviewerID, _
                      SampleResult, NumSampleRecsInBatch, MaxRecordsRequired, _
                      strMainWhere, strPrioritizationOrderBy, strOrderBy_FRESH)
    If (SampleResult.Code = RESULT_SUCCESS) Then
        Exit Sub
    End If
        
    LogMsg = LogStart + "No records found"
    Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)
        
    SampleResult.Code = RESULT_NO_RECORDS
    
    Exit Sub
    
ErrorHandler:
    ' Log the error and exit
    Log.Log(LogStart + "Error executing script (line " + CText(Err.LineNumber) + "):  " + _
            Err.Description + "  (0x" + CText(Format(Err.Number, "X")) + ")", logLevels.LOGLEVEL_ERROR)
    Set SampleResult.SampleRecs = Null
    SampleResult.Code = RESULT_FAILURE
    Exit Sub
End Sub
#endif


' *******************************************************************************
' The AuthenticateSampleRec function will be called if a respondent enters the
' survey through the Web.
Sub AuthenticateSampleRec(SampleResult, SampleFields)
    Dim dtNow
    Dim InterviewerID
    Dim ActiveField
    Dim bReject
    Dim strQueue
    Dim InterviewMode, RoutingContext
    Dim LogStart, LogMsg
   
    On Error GoTo ErrorHandler

    LogStart = CreateLogStart(SampleFields) + "AuthenticateSampleRec:  "
    dtNow = Now("UTC")
    LogMsg = LogStart + "Entered"
    InterviewerID = GetStringValue(SampleFields, FIELD_INTERVIEWERID)
    If (InterviewerID <> "") Then
        LogMsg = LogMsg + ", InterviewerID = " + InterviewerID
    End If
    LogMsg = LogMsg + ", current time (UTC) = " + CreateCanonicalDateTime(dtNow)
    Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)

    ' Try to find a matching record in the Sample Management database.
    Set SampleResult.SampleRec = Queues.AuthenticateSampleRec(SampleFields)

    If IsNullObject(SampleResult.SampleRec) Then
        ' No sample record found

        ' It is possible that this is a failover where 
        ' it is expected that the record is active but a timing
        ' condition has caused the record to be returned already
        Set ActiveField = FindItem(SampleFields, FIELD_ACTIVE)
        If Not IsNullObject(ActiveField) Then
            ' Try again but without the ActiveField
            LogMsg = LogStart + "Removing Active and trying again"
            Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)
            SampleFields.Remove(ActiveField)
            Set SampleResult.SampleRec = Queues.AuthenticateSampleRec(SampleFields)
        End If
    End If

    If IsNullObject(SampleResult.SampleRec) Then
        ' If not found in the standard ways, try a client specific method
        Set SampleResult.SampleRec = AuthenticateSampleRec_ClientSpecific(LogStart, SampleFields)
    End If

    If IsNullObject(SampleResult.SampleRec) Then
        Set InterviewProperties.Item(IVPROPS_DISPLAYTEXT).Value = DISPLAY_AUTH_FAILURE
        LogMsg = LogStart + "Failed, sample not found" 
        Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)

        ' This keyword indicates that authentication has failed.
        SampleResult.Code = RESULT_FAILURE
    Else
        bReject = False
        ' Case of queue name must match what is in sample database
        ' If queue is COMPLETED in database, then sample is rejected
        '     (unless it is being reviewed - telephone specific)
        ' If queue is OVERQUOTA, then sample is rejected
        ' If queue is ACTIVE, then sample is rejected, unless this is a restart
        strQueue = UCase(SampleResult.SampleRec.Fields.Item(FIELD_QUEUE).Value)
        If (strQueue = QUEUE_COMPLETED) Then
            ' If the Review InterviewProperty is set, then COMPLETED records can be returned
            If Not(GetBoolValue(InterviewProperties, IVPROPS_REVIEW)) Then
                ' Review is not set, check for chaining
                If (FindItem(SampleResult.SampleRec.Fields, FIELD_PROJECT)) Then
                    If (UCase(SampleResult.SampleRec.Fields[FIELD_PROJECT].Value) <> PROJECT2) Then
                        ' Run project2
                        SampleResult.SampleRec.Fields[FIELD_PROJECT].Value = PROJECT2
                    Else
                        bReject = True
                    End If
                Else
                    bReject = True
                End If
                If (bReject) Then
                    InterviewProperties.Item(IVPROPS_DISPLAYTEXT).Value = DISPLAY_ALREADY_COMPLETE
                    LogMsg = LogStart + "Rejected, sample has completed the survey before"
                    bReject = True
                End If
            End If
        ElseIf (strQueue = QUEUE_OVERQUOTA) Then
            InterviewProperties.Item(IVPROPS_DISPLAYTEXT).Value = DISPLAY_FAILED_QUOTA
            LogMsg = LogStart + "Rejected, sample signaled out of survey before"
            bReject = True
        ElseIf (strQueue = QUEUE_ACTIVE) Then
            If Not (Failover(LogStart)) Then
                Dim iTimeout
                iTimeout = GetIntValue(InterviewProperties, IVPROPS_TIMEOUT)
                If (iTimeout = 0) Then
                    iTimeout = 10
                Else
                    iTimeout = iTimeout / 60
                End If
                InterviewProperties.Item(IVPROPS_DISPLAYTEXT).Value = _
                    Replace(DISPLAY_ACTIVEPO, "{Timeout}", CText(iTimeout))
                LogMsg = LogStart + "Rejected, sample in ACTIVE queue"
                bReject = True
            End If
#ifdef INCLUDE_TELEPHONE
        ElseIf (CheckForSampleField(Queues.Properties.Item("FieldColumns").Value, FIELD_EXPIRATIONTIME)) Then
            If SampleResult.SampleRec.Fields.Item(FIELD_EXPIRATIONTIME).Value <> "00:00:00" and Now("UTC") >  SampleResult.SampleRec.Fields.Item(FIELD_EXPIRATIONTIME).Value Then
                InterviewProperties.Item(IVPROPS_DISPLAYTEXT).Value = DISPLAY_EXPIRES
                LogMsg = LogStart + "Rejected, sample has expired, " + FIELD_EXPIRATIONTIME + " " + CText(SampleResult.SampleRec.Fields[FIELD_EXPIRATIONTIME].Value)
                bReject = True
            End If
#endif
        End If
      
        If (bReject) Then
            Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)
            ' Release the reference to the SampleRec or it will stay Active
            ' and be unable to be found again
            Set SampleResult.SampleRec = Null
            SampleResult.Code = RESULT_REJECT

        Else
            If (InterviewerID <> "") Then
                InterviewMode = INTERVIEWMODE_CATI
                RoutingContext = ROUTING_CATI
            Else
                InterviewMode = INTERVIEWMODE_WEB
                RoutingContext = ROUTING_WEB
                
                ' Make sure the correct project is being run if chaining
                If (FindItem(SampleResult.SampleRec.Fields, FIELD_PROJECT)) Then
                    If (UCase(SampleResult.SampleRec.Fields[FIELD_PROJECT].Value <> PROJECT2)) Then
                        ' Handle case where Project field may not be initialized
                        SampleResult.SampleRec.Fields[FIELD_PROJECT].Value = PROJECT1
                    End If
                    InterviewProperties.Item(IVPROPS_PROJECT).Value = SampleResult.SampleRec.Fields[FIELD_PROJECT].Value
                End If
            End If
            If (Not CheckQuotas(LogStart, SampleResult.SampleRec, InterviewMode, InterviewProperties)) Then
                InterviewProperties.Item(IVPROPS_DISPLAYTEXT).Value = DISPLAY_FAILED_QUOTA

                Set SampleResult.SampleRec = Null
                SampleResult.Code = RESULT_REJECT
    
            Else
                strSavePreviousQueue = SampleResult.SampleRec.Fields.Item(FIELD_QUEUE).Value
                Queues.MoveSampleRec(QUEUE_ACTIVE, SampleResult.SampleRec)
            
                If (InterviewMode = INTERVIEWMODE_CATI) Then
                    UseThisSampleRecForCATI_Single(LogStart, SampleResult.SampleRec, InterviewerID)
                Else
                    UseThisSampleRecForWeb(LogStart, SampleResult.SampleRec)
                End If

                SampleResult.Code = RESULT_SUCCESS
            End If

        End If 
    End If
   
    Exit Sub
   
ErrorHandler:
    ' Log the error and exit
    Log.Log(LogStart + "Error executing script (line " + CText(Err.LineNumber) + "):  " + _
            Err.Description + "  (0x" + CText(Format(Err.Number, "X")) + ")", logLevels.LOGLEVEL_ERROR)
    Set SampleResult.SampleRec = Null
    SampleResult.Code = RESULT_FAILURE
    Exit Sub
End Sub


' *******************************************************************************
' This function implements the call outcome rules
Sub ReturnSampleRec(SampleResult, SampleRecReturnCode)
    Dim dtNow
    Dim SerialValue
    Dim ReturnRec
    Dim LogStart, LogMsg
#ifdef INCLUDE_TELEPHONE
    Dim bCATI
    Dim InterviewerID
    Dim HasOverride
    Dim PreviousCallOutcome
    Dim ExceedsMaxTries
#endif
       
    Set ReturnRec = SampleResult.SampleRec
   
    On Error GoTo ErrorHandler
   
    LogStart = CreateLogStart(ReturnRec.Fields) + "ReturnSampleRec:  "
    dtNow = Now("UTC")
    LogMsg = LogStart + "Entered, SampleRecReturnCode = " + SampleRecReturnCode.Name + _
             " (" + CText(SampleRecReturnCode.Code) + ")"
#ifdef INCLUDE_TELEPHONE
    InterviewerID = GetStringValue(ReturnRec.Fields, FIELD_INTERVIEWERID)
    If (InterviewerID <> "") Then
        LogMsg = LogMsg + ", InterviewerID = " + InterviewerID
    End If
#endif
    LogMsg = LogMsg + ", current time (UTC) = " + CreateCanonicalDateTime(dtNow)
    Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)

    ' Save Serial number for restart
    SerialValue = SaveSerial(LogStart, ReturnRec)

    FinishQuotas(LogStart, SampleRecReturnCode, SerialValue)
   
#ifdef INCLUDE_TELEPHONE
    ' Check if this is a CATI sample record with the required CATI sample fields
    bCATI = IsCATISampleRec(ReturnRec)
  
    HasOverride = False
    ExceedsMaxTries = False
    If (bCATI) Then
        If CheckForSampleFieldX(ReturnRec.Fields, FIELD_USEDOVERRIDE) Then
            If ReturnRec.Fields[FIELD_USEDOVERRIDE].Value = "1" Then
                HasOverride = True
            End If
        End If
        
        ' Set ReturnTime
        ReturnRec.Fields[FIELD_RETURNTIME].Value = dtNow
        
        ' Store the interviewer ID
        SaveInterviewerID(LogStart, ReturnRec, InterviewerID)
    
        ' Store SampleRecReturnCode
        ' Save PreviousCallOutcome in case it is required
        PreviousCallOutcome = ReturnRec.Fields[FIELD_CALLOUTCOME].Value
        ReturnRec.Fields[FIELD_CALLOUTCOME].Value = SampleRecReturnCode.Name
      
        ' If it is a CATI interview, update TryCount and/or AppointmentTryCount
        ' Increment before any rescheduling so MaxTries can be checked accurately
        If (ReturnRec.Fields[FIELD_INTERVIEWMODE].Value = INTERVIEWMODE_CATI) Then
            ExceedsMaxTries = IncrementTries(LogStart, ReturnRec, SampleRecReturnCode, HasOverride)
        End If
    End If

    If Not(ReturnSampleRec_DCCodes_ClientSpecific(LogStart, ReturnRec, SampleRecReturnCode, _
                    PreviousCallOutcome, HasOverride, ExceedsMaxTries)) Then
        ' Call function to handle client specific return codes
        If Not(ReturnSampleRec_ClientCodes_ClientSpecific(LogStart, ReturnRec, SampleRecReturnCode, _
                    PreviousCallOutcome, HasOverride, ExceedsMaxTries)) Then
            ' This call outcome has been added since the script was written.
            ' Send to UNUSABLE and write a log message
            Log.Log(LogStart + "Unhandled SampleRecReturnCode, moving to UNUSABLE", logLevels.LOGLEVEL_WARNING)
            Queues.MoveSampleRec(QUEUE_UNUSABLE, ReturnRec)
        End If
    End If
#else
    If Not(ReturnSampleRec_DCCodes_ClientSpecific(LogStart, ReturnRec, SampleRecReturnCode)) Then
        ' Call function to handle client specific return codes
        If Not(ReturnSampleRec_ClientCodes_ClientSpecific(LogStart, ReturnRec, SampleRecReturnCode)) Then
            ' A different Code could be due to using signal in the interview script
            Dim QueueName
            Set QueueName = "SIGNAL_" + CText(SampleRecReturnCode.Code)
            Set LogMsg = "SampleRecReturnCode.Code = " + CText(SampleRecReturnCode.Code) + ", moving sample to " + QueueName + " queue."
            Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)
            Queues.MoveSampleRec(QueueName, ReturnRec)
        End If
    End If
#endif      
      
   LogMsg = LogStart + "Exiting, Queue = " + ReturnRec.Fields[FIELD_QUEUE].Value
#ifdef INCLUDE_TELEPHONE
   If (bCATI) Then
      LogMsg = LogMsg + ", PreviousQueue = " + ReturnRec.Fields[FIELD_PREVIOUSQUEUE].Value
   End If
#endif
   Log.Log(LogMsg, logLevels.LOGLEVEL_INFO)

   SampleResult.Code = RESULT_SUCCESS
   
   Exit Sub
   
ErrorHandler:
   ' Log the error and exit
   Log.Log(LogStart + "Error executing script (line " + CText(Err.LineNumber) + "):  " + _
            Err.Description + "  (0x" + CText(Format(Err.Number, "X")) + ")", logLevels.LOGLEVEL_ERROR)
   SampleResult.Code = RESULT_FAILURE
   Exit Sub
End Sub



' *******************************************************************************
' IBM SPSS Data Collection functions
' Do not remove
#include "HelperFunctions.mrs"
